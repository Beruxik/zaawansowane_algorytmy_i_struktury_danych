KLASA Graph:
    METODA __init__(vertices):
        INICJALIZUJ V jako vertices
        INICJALIZUJ graph jako pustą listę

    METODA add_edge(u, v, w):
        DODAJ [u, v, w] do graph
        DODAJ [v, u, w] do graph

    METODA get_smallest_edge_from_vertex(vertex, visited):
        INICJALIZUJ edges_to_use jako pustą listę
        DLA każdego edge w graph:
            JEŚLI edge[1] nie jest w visited ORAZ edge[0] == vertex:
                DODAJ edge do edges_to_use
        
        SORTUJ edges_to_use według trzeciego elementu (waga) w rosnącej kolejności
        JEŚLI długość edges_to_use jest równa 0:
            ZWRÓĆ -1
        W PRZECIWNYM RAZIE:
            ZWRÓĆ pierwszy element edges_to_use

    METODA nearest_neighbour(starting_vertex):
        INICJALIZUJ visited jako listę zawierającą starting_vertex
        INICJALIZUJ result jako listę zawierającą wynik get_smallest_edge_from_vertex(starting_vertex, visited)
        DLA _ od 0 do V - 3:
            DODAJ result[length(result) - 1][1] do visited
            DODAJ wynik get_smallest_edge_from_vertex(result[length(result) - 1][1], visited) do result
            JEŚLI -1 jest w result:
                WYPISZ "Nie można zbudować cyklu Hamiltona za pomocą tego algorytmu."
                ZWRÓĆ
        
        INICJALIZUJ sum jako 0
        INICJALIZUJ path jako string zawierający result[0][0]
        DLA każdego edge w result:
            DODAJ edge[2] do sum
            DODAJ " -> " + edge[1] do path
        
        WYPISZ "Długość ścieżki: " + sum
        WYPISZ "Ścieżka: " + path
